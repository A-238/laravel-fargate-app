name: deploy

on:
  push:
    branches:
      - main
      - feature/push_images_to_ecr

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials for stg
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.STG_AWS_ASSUMEROLE_ARN }}
          role-duration-seconds: 1800

      - name: Set env vars for stg
        run: echo "ENV_NAME=stg" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and start containers
        run: docker compose up -d --build app web

      - name: Cache composer
        id: cache-composer
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: composer-1-${{ hashFiles('backend/composer.lock') }}

      - name: Install PHP dependencies
        if: ${{ !steps.cache-composer.outputs.cache-hit }}
        run: docker compose exec -T app composer install -n --prefer-dist --no-dev

      - name: Cache npm
        id: cache-npm-ci
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: npm-v1-${{ hashFiles('backend/package-lock.json') }}

      - name: Install Node.js dependencies
        if: ${{ !steps.cache-npm-ci.outputs.cache-hit }}
        run: docker compose exec -T web npm ci

      - name: Build frontend
        run: docker compose exec -T web env NPM_CONFIG_CACHE=/tmp/npm-cache npm run prod